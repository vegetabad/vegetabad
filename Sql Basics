                                  /* TOPIC 1: CREATING THE TABLE THROUGH QUERY , create 2 tables */

Create Table StudentData
(RollNo int,
FisrtName varchar(50),
MiddleName varchar(50),
LastName varchar(50),
Age int,
Marksobtained int,
totalmarks int)

/*execute*/

                                                        /*INSERT THE DATA IN THE TABLE*/

INSERT INTO StudentData VALUES
(1, 'Amit', 'v', 'chand', 28, 64, 100),
(2, 'Amruth','Jai', 'Ram', 34, 77, 100),
(3, 'Archana', 'Ram', 'Charan' , 36, 88, 100),
(4, 'Archies', 'Ratro', 'diago' , 33, 88, 100),
(5, 'brancho', 'singh', 'gupta' , 43, 80, 100)

/*execute */

                                                /*TOPIC 2:  SELECT Statement  *, Top , Distant, Count, As, Max , min , Avg */

SELECT *
FROM StudentData

SELECT Distinct*
FROM StudentData

SELECT Distinct (RollNo)
FROM StudentData

SELECT COUNT (RollNo)
FROM StudentData

SELECT COUNT (RollNo) As Lastnamecount  /* name in the coloumn*/
FROM StudentData

SELECT MAX(marksobtained)
FROM StudentData

SELECT MIN(marksobtained)
FROM StudentData


SELECT AVG(marksobtained)
FROM StudentData

SELECT Distinct*
FROM SQL Tutorial.dbo.studentdata


                                                                    /* TOPIC 3: where statement  =,<>, <,>,And, Or, Like , Null , Not Null, In */

SELECT *
FROM StudentData
WHERE FIRSTNAME = 'Hars'

SELECT *
FROM StudentData
WHERE age > 40

EXEC sp_rename 'StudentData.FisrtName', 'FirstName', 'COLUMN';    /* Changing the name of the coloumn */

SELECT *
FROM StudentData
WHERE age >= 40

SELECT *
FROM StudentData
WHERE age <= 40

SELECT *
FROM StudentData1
WHERE age <= 40 AND place = 'Davanagere'

SELECT *
FROM StudentData1
WHERE age <= 40 OR place = 'Davanagere'

SELECT *
FROM StudentData1
WHERE FirstName LIKE 'A%'        /* name starting from A */

SELECT *
FROM StudentData1
WHERE FirstName is NULL

SELECT *
FROM StudentData1
WHERE FirstName is NOT NULL

SELECT *
FROM StudentData1
WHERE FirstName IN ('Hars', 'Archana', 'Archies')

 
                               /* TOPIC 4: Group by , order By */

SELECT Gender
FROM StudentData1
GROUP BY place


SELECT GENDER 
FROm EmployeeDemographics
GROUP BY Gender


SELECT GENDER , COUNT(GENDER) 
FROm EmployeeDemographics
GROUP BY Gender



SELECT GENDER ,age,COUNT(GENDER) AS TotalGender
FROm EmployeeDemographics
GROUP BY GENDER, age

SELECT  GENDER ,age, COUNT(GENDER)
FROm EmployeeDemographics
WHERE Age>30
GROUP BY Gender,age

SELECT  GENDER ,age, COUNT(GENDER) As GenderCount
FROm EmployeeDemographics
GROUP BY Gender,age
ORDER BY GenderCount 

SELECT DISTINCT *
FROm EmployeeDemographics
ORDER BY 4 desc, 5 desc

SELECT DISTINCT *
FROm EmployeeDemographics
Where Age is NOT NULL
ORDER BY 4 



            /* TOPIC 5: Inner Join , Outer LEFT,RIGHT Join  */

SELECT DISTINCT *
    FROM EmployeeDemographics
    
    SELECT DISTINCT*
    FROM EmployeeSalary

	SELECT DISTINCT*
FROM EmployeeDemographics
Inner Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID



Insert into EmployeeDemographics VALUES

(1011, 'Ryan', 'Howard', 26, 'Male'),

(NULL, 'Holly','Flax', NULL, 'Male'),

(1013, 'Darryl', 'Philbin', NULL, 'Male')

Insert into EmployeeSalary VALUES

(1010, NULL, 47000),

(NULL, 'Salesman', 43000)

SELECT DISTINCT*
FROM EmployeeDemographics
Inner Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID

SELECT DISTINCT*
FROM EmployeeDemographics
Full outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 


SELECT DISTINCT*
FROM EmployeeDemographics
Right outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT DISTINCT*
FROM EmployeeDemographics
Left outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT DISTINCT EmployeeDemographics.EmployeeID, FirstName, LastName, JobTitle,Salary
FROM EmployeeDemographics
Inner Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT DISTINCT EmployeeDemographics.EmployeeID, FirstName, LastName, JobTitle,Salary
FROM EmployeeDemographics
Full outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT DISTINCT EmployeeDemographics.EmployeeID, FirstName, LastName, JobTitle,Salary
FROM EmployeeDemographics
Right outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT DISTINCT EmployeeDemographics.EmployeeID, FirstName, LastName, JobTitle,Salary
FROM EmployeeDemographics
Left outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT DISTINCT EmployeeSalary.EmployeeID, FirstName, LastName, JobTitle,Salary
FROM EmployeeDemographics
Full outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT Distinct*
FROM EmployeeDemographics
Full outer Join EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT Distinct EmployeeDemographics.EmployeeID,FirstName, LastName,Salary
FROM EmployeeDemographics
Inner JOin EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 
Where FirstName <> 'Hars'   
ORDER BY Salary Desc


SELECT Distinct Salary, JobTitle
FROM EmployeeDemographics
Inner JOin EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 

SELECT Distinct Salary, JobTitle
FROM EmployeeDemographics
Inner JOin EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 
WHERE JobTitle = 'Salesman'

SELECT Distinct JobTitle , AVG(Salary)
FROM EmployeeDemographics
Inner JOin EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 
WHERE JobTitle = 'Salesman'
GROUP BY JobTitle

SELECT DISTINCT *
FROM EmployeeDemographics 
Union EmployeeSalary
ON 

                   /* TOPIC 6: Union , Union All  inserted new rows in EmployeeDemographics and created WareHouseEmployeeDemographics */

CREATE TABLE WareHouseEmployeeDemographics
( EmployeeID int,
FirstName Varchar(50),
LastName Varchar (50),
Age int,
Gender Varchar (50))

INSERT INTO WareHouseEmployeeDemographics VALUES
(1013, 'Darryl', 'Philbin', NULL, 'Male'),

(1050, 'Roy', 'Anderson', 31, 'Male'),

(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),

(1052, 'Val', 'Johnson', 31, 'Female')



SELECT Distinct*
FROM EmployeeDemographics
Full outer Join WareHouseEmployeeDemographics
ON EmployeeDemographics.EmployeeID = WareHouseEmployeeDemographics.EmployeeID

SELECT Distinct*
FROM EmployeeDemographics

SELECT *
FROM WareHouseEmployeeDemographics

SELECT Distinct*
FROM EmployeeDemographics
UNION
SELECT *
FROM WareHouseEmployeeDemographics

SELECT  *
FROM EmployeeDemographics
UNION ALL
SELECT  *
FROM WareHouseEmployeeDemographics
ORDER BY EmployeeID

/* data types must be same to use Union */


                                               /* Topic 7: Case statement */

SELECT DISTINCT *
FROM EmployeeDemographics

SELECT DISTINCT FirstName ,Age, Gender,
CASE
     WHEN age < 30 THEN 'youngest' 
WHEN Age > 35 THEN 'Older'
WHEN age > 30 THEN 'Old'
WHEN age = 30 THEN 'Young'
END As AgeGroup
FROM EmployeeDemographics
WHERE Age is NOT NULL
ORDER BY Age          

SELECT Distinct EMployeeId,FirstName ,Age,Gender,
CASE
WHEN age <= 30 then 'GM'
WHen age >= 38 then 'NOT ELIGIBLE'
when age >=35 then 'SC & ST'
when age > 30 then 'OBC'
End As AgeGroup
FROM EmployeeDemographics 
Where age is NOT NULL
order By age

SELECT DISTINCT FirstName,LastName, JobTitle, Salary
FROM EmployeeDemographics
JOIN EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID

/* Salary rise */

SELECT DISTINCT FirstName,JobTitle,Salary,
CASE 
WHEN Jobtitle = 'Salesman' Then Salary +(Salary * .10)
WHEN Jobtitle = 'Manager' THEN Salary + (Salary * 1)
WHEN Jobtitle = 'HR' THEN Salary + (Salary * -.50)
ELSE Salary + ( Salary * .05) 
END As SalaryHike
FROM EmployeeDemographics
JOIN EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID


/*TOPIC 9: Having Clause */

SELECT Jobtitle,COUNT(Jobtitle)AS TotalJobs, Avg(Salary) AS AvgSalary
FROM EmployeeDemographics
JOIN EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 
GROUP BY JobTitle
HAVING AVG(Salary) >45000
ORDER BY Avg(Salary)


SELECT DISTINCT Jobtitle,COUNT(Jobtitle)AS TotalJobs, Avg(Salary) AS AvgSalary
FROM EmployeeDemographics
JOIN EmployeeSalary
ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID 
GROUP BY JobTitle
HAVING COUNT(JobTitle)>3
ORDER BY Avg(Salary) 

/* Updating /Deleting Data */

SELECT DISTINCT*
FROM EmployeeDemographics
ORDER BY EmployeeID

UPDATE EmployeeDemographics
SET EmployeeID =1012
WHERE FirstNAME = 'Holly'

UPDATE EmployeeDemographics
SET Gender = 'Male'
WHERE FirstName = 'Pam'

 
DELETE  
FROM EmployeeDemographics
WHERE EmployeeID = 1001

INSERT INTO EmployeeDemographics VALUES
(1001, 'HARS', 'DEV', 30,'Male')

SELECT DISTINCT*
FROM EmployeeDemographics
ORDER BY EmployeeID


/* TOPIC 11: Aliasing */

SELECT FirstName As FName
FROM EmployeeDemographics

SELECT FirstName + ' '+ LastName As FullName
FROM EmployeeDemographics


SELECT Age
FROM EmployeeDemographics

SELECT AVG(age) AS AvgName 
FROM EmployeeDemographics

SELECT DISTINCT demo.EmployeeID, Demo.FirstName,Sal.JobTitle , Demo.Age
FROM EmployeeDemographics Demo
LEFT JOIN EmployeeSalary Sal
ON Demo.EmployeeID = Sal.EmployeeID
LEFT JOIN WareHouseEmployeeDemographics Ware
ON Demo.EmployeeID= Ware.EmployeeID



 /* Partition by */

  SELECT DISTINCT FirstName , Age, Gender, COUNT(Gender)
  FROM EmployeeDemographics Dem
  JOIN EmployeeSalary Sal
  ON Dem.EmployeeID = Sal.EmployeeID
  GROUP BY Gender , Age , FirstName


  SELECT DISTINCT FirstNAme, Age, Salary, Gender, COUNT(Gender) OVER ( PARTITION BY Gender) As TotalGender
  FROM EmployeeDemographics Dem
  JOIN EmployeeSalary Sal
  ON Dem.EmployeeID = Sal.EmployeeID
  GROUP BY Gender , Age , FirstName , Salary
  ORDER BY Age 


/* Topic : CTEs (Common Table Expression*/

WITH CTE_Employee as (
SELECT DISTINCT Dem.EmployeeID , FirstName, LastName, Age ,JobTitle , COUNT(jobtitle) OVER (PARTITION BY 
JobTitle)as JobtitleCount , Avg(Age)OVER ( Partition BY Age)as AVGAge , 
Avg (Salary)OVER ( Partition BY Salary) As AVGSalary 
FROM EmployeeDemographics Dem
JOIN EmployeeSalary Sal
ON Dem.EmployeeID=Sal.EmployeeID
)
SELECT JobTitle, JobtitleCount
FROM CTE_Employee
GROUP BY JobTitle , JobtitleCount



  /* Topic: Temp Table Create and make dissappear using DROP TABLE IF EXISTS */

  CREATE TABLE #temp_Employee (
  EmployeeID int,
  JobTitle Varchar(50),
  Salary int
  )

  SELECT *
  FROM #temp_Employee

  INSERT INTO #temp_Employee VALUES
  (2001, 'Engineer', 100000),
  (2002, 'Data Engineer', 300000),
  (2003, 'Product Engineer', 400000)


  INSERT INTO #temp_Employee
  SELECT DISTINCT *
  FROM EmployeeSalary
  WHERE EmployeeID is NOT NULL
  And JobTitle is NOT NULL 
  
  SELECT DISTINCT*
  FROM #temp_Employee
  WHERE EmployeeID is NOT NULL
  And JobTitle is NOT NULL 
  ORDER BY Salary desc

  CREATE TABLE  #temp_Employee2(
  JobTitle Varchar (50),
  EMployeesperjob int,
  AVGSalary int,
  AVGage  int)

  INSERT INTO #temp_Employee2
  SELECT DISTINCT JObTitle , COUNT(Jobtitle) , AVG(Salary), AVG(Age)
  FROM EmployeeDemographics Dem
  JOIN EmployeeSalary Sal
  On Dem.EmployeeID=Sal.EmployeeID
  GROUP BY JobTitle

  SELECT *
  FROM #temp_Employee2
  ORDER BY AvgSalary


  DROP TABLE IF EXISTS #temp_Employee2

  SELECT *
  FROM EmployeeDemographics

  DROP TABLE IF EXISTS EmployeeDemographics

  Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

  Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')


* Topic : String Functions - TRIM , LTRIM , RTRIM , Replace, SubString , Upper , Lower  */

CREATE TABLE EMployeeErrors (
EmployeeID INt,
FirstName Varchar (50),
LastName Varchar(50),
)

INSERT INTO EMployeeErrors VALUES
(1001,'   Hars','Dev'),
(1002, 'Me gha', 'Ashok'),
(1005, 'Mithu','MN')


SELECT *
FROM EMployeeErrors

DROP TABLE IF EXISTS EMployeeErrors

/*Trim gets rid of Blanck space */

SELECT FirstName,TRIM(FirstName) as NameTrim
FROM EmployeeErrors






